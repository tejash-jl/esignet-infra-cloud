steps:
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'Authorize Cloud Build'
  entrypoint: 'bash'
  args:
    - -c
    - |
      apt-get install dnsutils jq -y &&
      cloudbuild_external_ip=$(dig @resolver4.opendns.com myip.opendns.com +short) &&
      old_cidr=$(gcloud container clusters describe ${_CLUSTER_NAME_} --zone=${_REGION_} --format json | jq -r '.masterAuthorizedNetworksConfig.cidrBlocks[] | .cidrBlock' | tr '\n' ',') &&
      gcloud container clusters update ${_CLUSTER_NAME_} --zone=${_REGION_} --enable-master-authorized-networks --master-authorized-networks "$old_cidr$cloudbuild_external_ip/32"
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'get-credentials'
  args: ['container', 'clusters', 'get-credentials', '${_CLUSTER_NAME_}', '--project=${_PROJECT_ID_}', '--region=${_REGION_}']
- name: 'gcr.io/cloud-builders/kubectl'
  id: 'ingress-cluster-admin'
  entrypoint: 'kubectl'
  args: ['create', 'clusterrolebinding', 'cluster-admin-binding', '--clusterrole', 'cluster-admin', '--user', '$(gcloud config get-value account)']
  waitFor:
    - 'get-credentials'
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'install-ingress'
  entrypoint: 'bash'
  args:
    - -c
    - |
      bash ./deployments/scripts/ingress-init.sh ${_REGION_} ${_LB_NAME_}
  waitFor:
    - 'ingress-cluster-admin'
- name: 'gcr.io/${_PROJECT_ID_}/helm:3.12.0'
  id: 'helm-cert-manager-repo'
  entrypoint: 'helm'
  args: ['repo', 'add', 'jetstack', 'https://charts.jetstack.io']
  waitFor:
    - 'install-ingress'
- name: 'gcr.io/${_PROJECT_ID_}/helm:3.12.0'
  id: 'install-certs-manager'
  entrypoint: 'helm'
  args: ['install', 'cert-manager', 'jetstack/cert-manager', '--version', 'v1.15.1', '-n', 'cert-manager', '--create-namespace', '--set', 'crds.enabled=true']
  waitFor:
    - 'helm-cert-manager-repo'
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'certs-issuer'
  entrypoint: 'bash'
  args:
    - -c
    - |
      kubectl create ns esignet &&
      cat deployments/configs/cert-issuer.yaml | sed "s/EMAIL/${_EMAIL_ID_}/g" | sed "s/DOMAIN/${_DOMAIN_}/g" | kubectl apply -n esignet -f -
  waitFor:
    - 'install-certs-manager'
- name: 'gcr.io/${_PROJECT_ID_}/helm:3.12.0'
  id: 'helm-kafka-repo'
  entrypoint: 'helm'
  args: ['repo', 'add', 'strimzi', 'https://strimzi.io/charts/']
  waitFor:
    - 'certs-issuer'
- name: 'gcr.io/${_PROJECT_ID_}/helm:3.12.0'
  id: 'helm-kafka-ui-repo'
  entrypoint: 'helm'
  args: ['repo', 'add', 'kafka-ui', 'https://provectus.github.io/kafka-ui-charts']
  waitFor:
    - 'helm-kafka-repo'
- name: 'gcr.io/${_PROJECT_ID_}/helm:3.12.0'
  id: 'helm-kafka-install'
  entrypoint: 'helm'
  args: ['install', 'strimzi', 'strimzi/strimzi-kafka-operator', '-n', 'kafka', '--create-namespace']
  waitFor:
    - 'helm-kafka-ui-repo'
- name: 'gcr.io/${_PROJECT_ID_}/helm:3.12.0'
  id: 'helm-kafka-ui-install'
  entrypoint: 'helm'
  args: ['install', 'kafka-ui', 'kafka-ui/kafka-ui', '-n', 'kafka', '-f', 'deployments/configs/kafka-ui-values.yaml']
  waitFor:
    - 'helm-kafka-install'
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'kafka-server-install'
  entrypoint: 'bash'
  args:
    - -c
    - |
      kubectl apply -f deployments/configs/kafka.yml -n kafka
  waitFor:
    - 'helm-kafka-ui-install'
- name: 'gcr.io/${_PROJECT_ID_}/helm:3.12.0'
  id: 'helm-softhsm-repo'
  entrypoint: 'helm'
  args: ['repo', 'add', 'mosip', 'https://mosip.github.io/mosip-helm']
  waitFor:
    - 'kafka-server-install'
- name: 'gcr.io/${_PROJECT_ID_}/helm:3.12.0'
  id: 'helm-softhsm-install'
  entrypoint: 'helm'
  args: ['install', 'softhsm', 'mosip/softhsm', '-n', 'esignet', '--create-namespace', '--set', 'image.repository=mosipqa/softhsm', '--set', 'image.tag=v2', '-f', 'deployments/configs/softhsm.yaml', '--version', '12.0.2', '--wait']
  waitFor:
    - 'helm-softhsm-repo'
- name: 'gcr.io/${_PROJECT_ID_}/helm:3.12.0'
  id: 'helm-artifactory-server-install'
  entrypoint: 'helm'
  args: ['install', 'artifactory', 'mosip/artifactory', '-n', 'esignet', '--create-namespace', '--set', 'image.repository=mosipqa/artifactory-server', '--set', 'image.tag=1.4.1-ES', '--version', '12.0.2', '--wait']
  waitFor:
    - 'helm-softhsm-install'
- name: 'gcr.io/${_PROJECT_ID_}/helm:3.12.0'
  id: 'helm-keycloak-install'
  entrypoint: 'bash'
  args:
    - -c
    - |
      apt-get update
      apt-get install jq -y &&
      sqlIP=$(gcloud sql instances describe ${_DB_NAME_} --format=json  | jq -r ".ipAddresses[0].ipAddress") &&
      sqlPass=$(gcloud secrets versions access latest --secret ${_SECRET_NAME_}) &&
      helm install keycloak mosip/keycloak -n esignet --create-namespace --version 7.1.18 -f deployments/configs/keycloak.yaml --set ingress.hostname=${_DOMAIN_} --set externalDatabase.host=$sqlIP --set externalDatabase.password=$sqlPass --wait
  waitFor:
    - 'helm-artifactory-server-install'
- name: 'gcr.io/${_PROJECT_ID_}/helm:3.12.0'
  id: 'helm-postgres-init'
  entrypoint: 'bash'
  args:
    - -c
    - |
      apt-get update
      apt-get install jq -y &&
      sqlIP=$(gcloud sql instances describe ${_DB_NAME_} --format=json  | jq -r ".ipAddresses[0].ipAddress") &&
      sqlPass=$(gcloud secrets versions access latest --secret ${_SECRET_NAME_}) &&
      kubectl create secret -n esignet generic postgres --from-literal=password="$sqlPass" &&
      helm -n esignet install postgres-init mosip/postgres-init -f deployments/configs/db_init.yaml --version 12.0.2 --set databases.mosip_esignet.host=$sqlIP --wait
  waitFor:
    - 'helm-keycloak-install'
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'esignet-config-map'
  entrypoint: 'bash'
  args:
    - -c
    - |
      sh deployments/scripts/config-init.sh ${_DOMAIN_} ${_DB_NAME_} ${_SECRET_NAME_} ${_REDIS_NAME_} ${_REGION_}
  waitFor:
    - 'helm-postgres-init'
- name: 'gcr.io/${_PROJECT_ID_}/helm:3.12.0'
  id: 'helm-esignet-install'
  entrypoint: 'bash'
  args:
    - -c
    - |
      apt-get update
      apt-get install jq -y &&
      helm -n esignet install esignet mosip/esignet --version 1.4.1 -f deployments/configs/esignet-values.yaml &&
      kubectl get deploy esignet -n esignet -o json > deploy.json &&
      cat <<< $(jq '.spec.template.spec += {"volumes":[{"name":"esignet-properties","configMap":{"name":"esignet-local-properties"}}]}' deploy.json) > deploy.json &&
      cat <<< $(jq '.spec.template.spec.containers[0] += {"volumeMounts":[{"mountPath":"/home/mosip/esignet-local.properties","name":"esignet-properties","subPath":"esignet-local.properties"}]}' deploy.json) > deploy.json &&
      kubectl apply -f deploy.json -n esignet
- name: 'gcr.io/${_PROJECT_ID_}/helm:3.12.0'
  id: 'helm-esignet-ui-install'
  entrypoint: 'bash'
  args:
    - -c
    - |
      helm -n esignet install oidc-ui mosip/oidc-ui -f deployments/configs/ui-values.yaml --version 1.4.1 &&
      cat deployments/configs/ingress.yaml | sed 's/DOMAIN/${_DOMAIN_}/'  | kubectl apply -n esignet -f -
  waitFor:
    - 'helm-esignet-install'
- name: 'gcr.io/${_PROJECT_ID_}/helm:3.12.0'
  id: 'helm-keycloak-init'
  entrypoint: 'bash'
  args:
    - -c
    - |
      kubectl create configmap keycloak-host --from-literal=keycloak-internal-service-url=http://keycloak.esignet.svc.cluster.local:80/auth/ -n esignet &&
      helm -n esignet install keycloak-init mosip/keycloak-init --set frontend=https://${_DOMAIN_}/auth --version 12.0.2
  waitFor:
    - 'helm-esignet-ui-install'
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'Remove worker cidr'
  entrypoint: 'bash'
  waitFor: 'helm-keycloak-init'
  args:
    - -c
    - |
      apt-get install dnsutils jq -y &&
      cloudbuild_external_ip=$(dig @resolver4.opendns.com myip.opendns.com +short) &&
      old_cidr=$(gcloud container clusters describe ${_CLUSTER_NAME_} --zone=${_REGION_} --format json | jq 'del(.masterAuthorizedNetworksConfig.cidrBlocks[] | select(.cidrBlock == "'"$cloudbuild_external_ip/32"'"))' | jq -r '.masterAuthorizedNetworksConfig.cidrBlocks[] | .cidrBlock' | tr '\n' ','  | sed 's/,$//' ) &&
      gcloud container clusters update ${_CLUSTER_NAME_} --zone=${_REGION_} --enable-master-authorized-networks --master-authorized-networks "$old_cidr"
tags: ['cloud-builders-community']
serviceAccount: "projects/${_PROJECT_ID_}/serviceAccounts/${_SERVICE_ACCOUNT_}"
logsBucket: "gs://${_LOG_BUCKET_}"
substitutions:
  _PROJECT_ID_: ''
  _REGION_: ''
  _CLUSTER_NAME_: 'esignet-dev-cluster'
  _DOMAIN_: ''
  _LOG_BUCKET_: ''
  _EMAIL_ID_: ''
  _SERVICE_ACCOUNT_: ''
  _SECRET_NAME_: 'esignet-dev'
  _DB_NAME_: 'esignet-dev-pgsql'
  _REDIS_NAME_: 'esignet-dev-redis'
  _LB_NAME_: 'esignet-dev-glb-lb-ip'
options:
    dynamicSubstitutions: true
#    pool:
#      name: 'projects/${_PROJECT_ID_}/locations/${_REGION_}/workerPools/cloudbuild-private-worker-pool'
