steps:
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'get-credentials'
  args: ['container', 'clusters', 'get-credentials', '${_CLUSTER_NAME_}', '--project=${_PROJECT_ID_}', '--region=${_REGION_}', '--internal-ip']


- name: 'gcr.io/${_PROJECT_ID_}/helm:3.12.0'
  id: 'ingress-cluster-admin'
  entrypoint: 'bash'
  args:
    - -c
    - |
      kubectl create clusterrolebinding cluster-admin-binding --clusterrole cluster-admin --user $(gcloud config get-value account)
  waitFor:
    - 'get-credentials'


- name: 'gcr.io/${_PROJECT_ID_}/helm:3.12.0'
  id: 'install-istio-base'
  entrypoint: 'bash'
  args:
    - -c
    - |
      helm repo add istio https://istio-release.storage.googleapis.com/charts
      helm repo update
      helm install istio-base istio/base -n istio-system --create-namespace --set defaultRevision=default --wait
  waitFor:
    - 'ingress-cluster-admin'

- name: 'gcr.io/${_PROJECT_ID_}/helm:3.12.0'
  id: 'install-istiod'
  entrypoint: 'bash'
  args:
    - -c
    - |
      helm install istiod istio/istiod -n istio-system --wait
  waitFor:
    - 'install-istio-base'

- name: 'gcr.io/${_PROJECT_ID_}/helm:3.12.0'
  id: 'install-istio-ingressgateway'
  entrypoint: 'bash'
  args:
    - -c
    - |
      helm install istio-ingressgateway istio/gateway -n istio-system --wait
  waitFor:
    - 'install-istiod'

- name: 'gcr.io/${_PROJECT_ID_}/helm:3.12.0'
  id: 'helm-cert-manager-repo'
  entrypoint: 'helm'
  args: ['repo', 'add', 'jetstack', 'https://charts.jetstack.io']
  waitFor:
    - 'install-istio-ingressgateway'

- name: 'gcr.io/${_PROJECT_ID_}/helm:3.12.0'
  id: 'install-certs-manager'
  entrypoint: 'bash'
  args:
    - -c
    - |
      helm install cert-manager jetstack/cert-manager --version v1.16.1 -n cert-manager --create-namespace --set crds.enabled=true
  waitFor:
    - 'helm-cert-manager-repo'

- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'certs-issuer'
  entrypoint: 'bash'
  args:
    - -c
    - |
      kubectl create ns esignet &&
      cat deployments/configs/cert-issuer.yaml | sed "s/EMAIL/${_EMAIL_ID_}/g" | sed "s/DOMAIN/${_DOMAIN_}/g" | kubectl apply -n esignet -f -
  waitFor:
    - 'install-certs-manager'

- name: 'gcr.io/${_PROJECT_ID_}/helm:3.12.0'
  id: 'helm-kafka-repo'
  entrypoint: 'helm'
  args: ['repo', 'add', 'strimzi', 'https://strimzi.io/charts/']
  waitFor:
    - 'certs-issuer'

- name: 'gcr.io/${_PROJECT_ID_}/helm:3.12.0'
  id: 'helm-kafka-ui-repo'
  entrypoint: 'helm'
  args: ['repo', 'add', 'kafka-ui', 'https://provectus.github.io/kafka-ui-charts']
  waitFor:
    - 'helm-kafka-repo'

- name: 'gcr.io/${_PROJECT_ID_}/helm:3.12.0'
  id: 'helm-kafka-install'
  entrypoint: 'helm'
  args: ['install', 'strimzi', 'strimzi/strimzi-kafka-operator', '-n', 'kafka', '--create-namespace']
  waitFor:
    - 'helm-kafka-ui-repo'

- name: 'gcr.io/${_PROJECT_ID_}/helm:3.12.0'
  id: 'helm-kafka-ui-install'
  entrypoint: 'helm'
  args: ['install', 'kafka-ui', 'kafka-ui/kafka-ui', '-n', 'kafka', '-f', 'deployments/configs/kafka-ui-values.yaml']
  waitFor:
    - 'helm-kafka-install'

- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'kafka-server-install'
  entrypoint: 'bash'
  args:
    - -c
    - |
      kubectl apply -f deployments/configs/kafka.yml -n kafka
  waitFor:
    - 'helm-kafka-ui-install'

- name: 'gcr.io/${_PROJECT_ID_}/helm:3.12.0'
  id: 'helm-esignet-install'
  entrypoint: 'bash'
  args:
    - -c
    - |
      set -a
      echo ${_LB_NAME_} ${_EMAIL_ID_} ${_CLUSTER_NAME_} ${_REDIS_NAME_} ${_SECRET_NAME_} ${_DB_NAME_} ${_ENABLE_MOCK_} ${_DOMAIN_}
      apt-get update
      apt-get install jq wget -y &&
      wget https://github.com/mikefarah/yq/releases/download/v4.44.2/yq_linux_amd64.tar.gz -O - | tar xz && mv yq_linux_amd64 /usr/bin/yq
      export $(grep -v '^#' .env | xargs -d '\n')
      helm repo add mosip $mosip_repo
      helm install softhsm mosip/softhsm -n esignet --create-namespace --set image.repository="$softhsm_docker_image" --set image.tag="$softhsm_docker_version" -f deployments/configs/softhsm.yaml --version "$softhsm_helm_version" --wait
      helm install artifactory mosip/artifactory -n esignet --create-namespace --set image.repository=$artifactory_docker_image --set image.tag=$artifactory_docker_version --version $artifactory_helm_version --wait
      sqlIP=$(gcloud sql instances describe ${_DB_NAME_} --format=json  | jq -r ".ipAddresses[0].ipAddress") &&
      sqlPass=$(gcloud secrets versions access latest --secret ${_SECRET_NAME_}) &&
      helm install keycloak mosip/keycloak -n esignet --create-namespace --version $keycloak_helm_version -f deployments/configs/keycloak.yaml --set ingress.hostname=${_DOMAIN_} --set externalDatabase.host=$sqlIP --set externalDatabase.password=$sqlPass --set image.repository=$keycloak_docker_image --set image.tag=$keycloak_docker_version --wait
      kubectl create secret -n esignet generic postgres --from-literal=password="$sqlPass" &&
      helm -n esignet install postgres-init mosip/postgres-init -f deployments/configs/db_init.yaml --version $postgres_init_helm_version --set databases.mosip_esignet.host=$sqlIP --set image.repository=$postgres_init_docker_image --set image.tag=$postgres_init_docker_version --wait
      sh deployments/scripts/config-init.sh ${_DOMAIN_} ${_DB_NAME_} ${_SECRET_NAME_} ${_REDIS_NAME_} ${_REGION_} ${_ENABLE_MOCK_}
      helm -n esignet template esignet mosip/esignet --version $esignet_helm_version -f deployments/configs/esignet-values.yaml --set image.repository=$esignet_docker_image --set image.tag=$esignet_docker_version > deploy.yaml
      yq  e -i 'select(di == 3).spec.template.spec.volumes += [{"name":"esignet-properties","configMap":{"name":"esignet-local-properties"}}]' deploy.yaml
      yq e -i 'select(di == 3).spec.template.spec.containers[0] += {"volumeMounts":[{"mountPath":"/home/mosip/esignet-local.properties","name":"esignet-properties","subPath":"esignet-local.properties"}]}' deploy.yaml
      kubectl apply -f deploy.yaml -n esignet
      helm -n esignet install oidc-ui mosip/oidc-ui -f deployments/configs/ui-values.yaml --version $oidcui_helm_version --set image.repository=$oidcui_docker_image --set image.tag=$oidcui_docker_version --wait
      #cat deployments/configs/ingress.yaml | sed 's/DOMAIN/${_DOMAIN_}/'  | kubectl apply -n esignet -f -
      cat deployments/configs/certificate.yaml | sed 's/DOMAIN/${_DOMAIN_}/' | kubectl apply -n esignet -f -
      cat deployments/configs/gateway.yaml | sed 's/DOMAIN/${_DOMAIN_}/' | kubectl apply -n esignet -f -
      kubectl create configmap keycloak-host --from-literal=keycloak-internal-service-url=http://keycloak.esignet.svc.cluster.local:80/auth/ -n esignet &&
      helm -n esignet install keycloak-init mosip/keycloak-init --set frontend=https://${_DOMAIN_}/auth --version $keycloak_init_helm_version --set image.repository=$keycloak_init_docker_image --set image.tag=$keycloak_init_docker_version
      set +a
  waitFor:
    - 'kafka-server-install'
- name: 'gcr.io/${_PROJECT_ID_}/helm:3.12.0'
  id: 'helm-mock-identity-install'
  entrypoint: 'bash'
  args:
    - -c
    - |
      if [[ ${_ENABLE_MOCK_} == "true" ]]
      then
        set -a
        export $(xargs < .env)
        sh deployments/scripts/mock-config-init.sh ${_DB_NAME_} ${_SECRET_NAME_}
        apt-get update
        apt-get install wget -y
        wget https://github.com/mikefarah/yq/releases/download/v4.44.2/yq_linux_amd64.tar.gz -O - | tar xz && mv yq_linux_amd64 /usr/bin/yq
        helm  -n esignet template mock-identity-system mosip/mock-identity-system --version $mock_ida_helm_version -f deployments/configs/mock-identity-values.yaml --set image.repository=$mock_ida_docker_image --set image.tag=$mock_ida_docker_version > deploy.yaml
        yq  e -i 'select(di == 3).spec.template.spec.volumes += [{"name":"mock-identity-properties","configMap":{"name":"mock-identity-properties"}}]' deploy.yaml
        yq e -i 'select(di == 3).spec.template.spec.containers[0] += {"volumeMounts":[{"mountPath":"/home/mosip/mock-identity-system-default.properties","name":"mock-identity-properties","subPath":"mock-identity-system-default.properties"}]}' deploy.yaml
        kubectl apply -f deploy.yaml -n esignet
        #cat deployments/configs/mock-identity-ingress.yaml | sed 's/DOMAIN/${_DOMAIN_}/'  | kubectl apply -n esignet -f -
      else
        echo "Skipping mock service setup"
      fi
  waitFor:
    - 'helm-esignet-install'
tags: ['cloud-builders-community']
serviceAccount: "projects/${_PROJECT_ID_}/serviceAccounts/${_SERVICE_ACCOUNT_}"
logsBucket: "gs://${_LOG_BUCKET_}"
substitutions:
  _PROJECT_ID_: ''
  _REGION_: ''
  _CLUSTER_NAME_: 'esignet-dev-cluster'
  _DOMAIN_: ''
  _LOG_BUCKET_: ''
  _EMAIL_ID_: ''
  _SERVICE_ACCOUNT_: ''
  _SECRET_NAME_: 'esignet-dev'
  _DB_NAME_: 'esignet-dev-pgsql'
  _REDIS_NAME_: 'esignet-dev-redis'
  _LB_NAME_: 'esignet-dev-glb-lb-ip'
  _NAME_: 'esignet-dev'
  _ENABLE_MOCK_: "true"
options:
    dynamicSubstitutions: true
    pool:
      name: 'projects/${_PROJECT_ID_}/locations/${_REGION_}/workerPools/${_NAME_}-cloudbuild-private-worker-pool'